Here's a `tsconfig.json` file tailored for a React/TypeScript project, which you can use for your luxury FashionTV cosmetics website:

```json
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "react-jsx",
    "baseUrl": "src",
    "paths": {
      "@components/*": ["components/*"],
      "@styles/*": ["styles/*"],
      "@utils/*": ["utils/*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

### Explanation of Key Options:
- **target**: Specifies the ECMAScript target version.
- **module**: Sets the module system to CommonJS.
- **lib**: Includes the necessary libraries for DOM and ES features.
- **strict**: Enables all strict type-checking options.
- **jsx**: Specifies the JSX code generation mode.
- **baseUrl** and **paths**: Helps in setting up absolute imports for better organization.

Make sure to adjust the `baseUrl` and `paths` according to your project structure if needed. This configuration will help you build a high-end, elegant website using React and TypeScript.